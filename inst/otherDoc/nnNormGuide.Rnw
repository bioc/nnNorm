% \VignetteIndexEntry{nnNorm Tutorial}
% \VignetteKeywords{Spatial and Intensity Normalization}
% \VignettePackage{nnNorm}
\documentclass[11pt]{article}

\usepackage{amsmath,epsfig,fullpage} %pstricks
\usepackage{graphicx}
\usepackage[authoryear,round]{natbib}
\usepackage{hyperref}

\oddsidemargin 0.0in
\textwidth 6.5in
\topmargin 0.2in
\textheight 9 in

\bibliographystyle{abbrvnat}
\begin{document}

\title{\bf Bioconductor's nnNorm package}
\author{Adi Laurentiu Tarca$^1$}
\maketitle

\begin{center}
Wayne State University, Medicine - Perinatology Research Branch, Detroit,
Michigan, 48201.
   \url{http://vortex.cs.wayne.edu/tarca}\\
\end{center}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Overview}

The {\tt nnNorm} package provides utilities to detect and correct for spatial bias with two 
color DNA microarrays (or paired single channel data). The normalization implemented in {\tt nnNorm}
package is based on neural networks models. Functionality to compare the distributions of the 
normalized log ratios is also provided. For the simpler case when only intensity normalization 
is desired (univariate distortion color model, similar to print tip loess normalization), we provide
functionality to plot the bias estimate against the level of intensity for every print tip group.
\\

{\bf Introduction to intensity and spatial normalization.} This document provides a
tutorial for using the {\tt nnNorm} package. For a detailed description of the principles and
algorithmic implemented by this package consult \cite{tarca04}.\\

{\bf Spatial and intensity normalization implemented in {\tt nnNorm}.}
The {\tt nnNorm} package implements intensity and spatial normalization of cDNA data
based on neural network models. In this approach, the log average intensity {\tt A} and
pseudo spatial coordinates {\tt X} and {\tt Y} (obtained by binning the print tip group space into 
small square regions), are used as predictors (inputs) into a neural network model. Resistance 
to outliers is enhanced by implementing a N-fold cross validation (default nFolds=10) in which the 
data for a current spot is not used to estimate its own bias but the one of its neighbours.\\


\section{Changes with respect to previous versions}
The first version of {\tt nnNorm} was 1.4.0 and released within bioC
1.7. Thanks to the users' feed-back, {\tt nnNorm} continued to
improve through the subsequent versions. We would like to thank
especially to: Ken Kompass (Wash Univ, St Louis, MO, USA) for
pointing out the need of a verbose argument to the maNormNN
function; Elizabeth Thomas (CHR, Harvard University) and  Philippe
Hupé (Institut Curie, Paris France) who provided us with data sets
on which we could make improvements in the implementation of the algorithm. 
The changes in the actual {\tt nnNorm} version with respect to the
previous ones include: 
a) adding functionallity to detect spatial bias within the print tips, 
and b) modifying the normalization function {\tt maNormNN} by:
1) using a N-fold cross-validation method to estimate the bias, where the user can choose the 
number of folds (current default is nFolds=10);
2) avoiding convergence problems in neural network fitting by running 5 different training sessions and taking 
the median over the 5 different estimates,
3) allowing for user specified weights to discard certain spots from the normalization 
4) removing the "robust" argument which initially was designed to assign different weights to each spot,
weights that were computed as a function of how extreme the log-ratio of the spot is for a given 
intensity range.  

{\bf Help files.}  As with any R package, detailed information on functions, their arguments
and value, can be obtained in the help files. For instance, to view the help file for the function {\tt
 maNormNN} in a browser, use {\tt help.start()} followed by {\tt ? maNormNN}.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Case study: Apo AI dataset, Callow et al. }

 We demonstrate the functionality of this package using gene expression data from the Apo AI
study of \cite{callow00}. To load the Apo dataset in a object called {\tt Apo} of type
{\tt marrayRaw}, we read existing data from an internet connection.

<<eval=TRUE, echo=TRUE>>=
library(marray)
dataweb<-"http://www.stat.berkeley.edu/users/terry/zarray/Data/ApoA1/rg_a1ko_morph.txt"
data<-read.table(dataweb,header=TRUE, sep=",", dec=".")
ApoLayout<-new('marrayLayout',maNgr=4,maNgc=4,maNsr=19,maNsc=21)
spots<-4*4*19*21 # spots per array
Gb<-Rb<-array(c(0),c(spots,16));
Gf<-as.matrix(data[,seq(2,33,2)])
Rf<-as.matrix(data[,seq(3,33,2)])
labs <- c(paste(c("c"), 1:8, sep=""),paste(c("k"), 1:8, sep=""))
maInfo<-new('marrayInfo',maLabels = labs,maInfo=data.frame(Names=labs))
Apo<-new('marrayRaw',maRf=Rf,maGf=Gf,maRb=Rb,maGb=Gb,
maLayout=ApoLayout,maTargets=maInfo)
@

Note that the background values were set to zero as the data file contains background corrected red 
and green intensities.\\
Due to several factors, such as printing and washing, the raw log-ratios may depend not only on the average
log-intensity but also on the spatial coordinates \cite{yang02}.

The new function {\tt detectSpatialBias} added in this version of {\tt nnNorm} allows to identify 
automatically which print tips in the different arrays show spatial bias.

<<echo=TRUE>>=
tmp<-detectSpatialBias(Apo)
tmp
@

The {\tt detectSpatialBias} function computes two matrices: {\tt biasRow} and {\tt biasCol}. The elements of these 
matrices represent the fraction of rows (columns) for which the correlation coefficient between log-ratios, M, and 
column index (row index) is higher than a user specified treshold (default is 0.6).
As it can be seen, the arrays 8 (c8R) and 16 (k8R) shows strong column-wise bias (log-ratios are 
correlated with the row index) for several print-tips (especially 13 to 15).

Similar information (but more time consuming) can be obtained by looking at the spatial 
distribution of M values in each array.  

 Figure \ref{fig:rawImage} shows the
reconstructed image of log ratios {\tt M}, for slide No. 16 in the Apo AI data set. This image
is obtained using the {\tt maImage} function of {\tt marray} package.

<<rawImage,fig=TRUE,prefix=FALSE,echo=TRUE,include=FALSE,results=hide>>=
RGcol <- maPalette(low = "green", high = "red", k = 20)
maImage(Apo[,16],x="maM",col=RGcol,zlim=c(-2,2))
@

Observe the uneven distribution of M values in the print tip groups situated at the bottom of the figure.


\begin{figure}
\begin{center}
\includegraphics[width=4in,height=3.5in,angle=0]{rawImage}
\end{center}
\caption{Image of raw M values for Apo data set, slide No. 16.}
\protect\label{fig:rawImage}
\end{figure}


Now we perform normalization with the method of the {\tt nnNorm} package called {\tt maNormNN}. This function
returns a {\tt marrayNorm} type object (containing the normalized
log ratios). The {\tt maNormNN} function is a print-tip oriented
normalization method.

<<eval=TRUE,echo=TRUE,results=hide>>=
#library(nnNorm)
ApNN2DA<-maNormNN(Apo)
@

Figure \ref{fig:NNImage} shows the log ratios, for the same data as in Figure \ref{fig:rawImage} after
intensity and spatial normalization. Observe a rather uniform distribution of red and green colored spots.

<<NNImage,fig=TRUE,prefix=FALSE,echo=TRUE,include=FALSE,results=hide>>=
maImage(ApNN2DA[,16],x="maM",col=RGcol,zlim=c(-2,2))
@

\begin{figure}
\begin{center}
\includegraphics[width=4in,height=3.5in,angle=0]{NNImage}
\end{center}
\caption{Image of M values after nnNorm normalization, for Apo data set, slide No. 16.}
\protect\label{fig:NNImage}
\end{figure}


We may compare the robust neural networks normalization method with other existing approaches
that takes into account intensity and spatial bias fluctuations, like for e.g. a composite
normalization method available in {\tt marray} package.

<<eval=TRUE, echo=TRUE>>=
AcPLo2D<-maNormMain(Apo, f.loc = list(maNorm2D(),maNormLoess(x="maA",y="maM",
                z="maPrintTip")), a.loc=maCompNormEq())
@

We define a function able to compute the \cite{westfall&young93} adjusted p-values for different
normalizations of the same Apo data. For this we use functionality of the {\tt multtest} package 
(\cite{dudoit&shaffer02}).

<<eval=TRUE, echo=TRUE>>=
library(multtest)
getP<-function(maObj) {
X<-maM(maObj)
class<-c(rep(0,8),rep(1,8))
resT <- mt.maxT(X, class, B = 15000)
ord <- order(resT$index)
resT$adjp[ord]
}
@
Now we get the adjusted p-values for the three situations: raw data (Anone), composite
normalization (cpLo2DA) and robust neural networks based (pNN2DA).

<<eval=TRUE, results=hide>>=
pAnone<-log10(getP(Apo))
pAcPLo2D<-log10(getP(AcPLo2D))
pApNN2DA<-log10(getP(ApNN2DA))
@

We plot the log of adjusted p-values obtained using the normalized data. Results are shown in
Figure \ref{fig:pPlot}.

<<pPlot,fig=TRUE,prefix=FALSE,echo=TRUE,include=FALSE,results=hide>>=
#spot numbers with the smallest t statistic after print tip loess normalization
kout<-c(2149,4139,5356,540,1739,1496,2537,4941)
rnds<-sample(seq(-0.05,0.05,length=8))
methods<-c("none", "cPLo2D","pNN2DA")
plot(rep(1,length(pAnone)-length(kout)),pAnone[-kout],xlim=c(1,3),ylim=c(-4,0),xlab="Method",
    ylab="log10(p)",axes=FALSE);
points(rep(1,8)+rnds,pAnone[kout],col="red",pch=20)
points(rep(2,length(pAcPLo2D)-length(kout)),pAcPLo2D[-kout]); points(rep(2,8)+rnds,pAcPLo2D[kout],col="red",pch=20)
points(rep(3,length(pApNN2DA)-length(kout)),pApNN2DA[-kout]); points(rep(3,8)+rnds,pApNN2DA[kout],col="red",pch=20)
axis(1, 1:3, methods);axis(2); box()
@

The spots with the indices {\tt kout} above are those with smallest t-statistics after loess
print tip normalization as in \cite{yang01} and are supossed to show down-regulation in this comparison. 

\begin{figure}
\begin{center}
\includegraphics[width=4in,height=3.5in,angle=0]{pPlot}
\end{center}
\caption{Adjusted p values for raw data (none), composite normalization (cpLo2D), and robust neural networks (pNN2DA)}
\protect\label{fig:pPlot}
\end{figure}


Observe in Figure \ref{fig:pPlot} that the 8 genes (represented by filled red circles) may be 
confidently distinguished from the bulk of non-differentially expressed genes at a threshold of about p=0.01. 
Now we may want to compare the ability of this new normalization method to reduce the variability of log ratios
within slides.
An easy way to look at the distributions of the normalized {\tt M} values is to use the method {\tt compNorm}
of {\tt nnNorm} package (see Figure \ref{fig:densityC}).

<<densityC,fig=TRUE,prefix=FALSE,echo=TRUE,include=FALSE,results=hide>>=
compNorm(maM(Apo),maM(AcPLo2D),maM(ApNN2DA),bw=0.9,xlim=c(-2,2),titles=methods,type="d")
@

\begin{figure}
\begin{center}
\includegraphics[width=4in,height=3.5in,angle=0]{densityC}
\end{center}
\caption{Density plots of normalized log ratios}
\protect\label{fig:densityC}
\end{figure}


The same distributions may be inspected using the box plot, as shown in Figure \ref{fig:bPlot}.

<<bPlot,fig=TRUE,prefix=FALSE,echo=TRUE,include=FALSE,results=hide>>=
compNorm(maM(Apo),maM(AcPLo2D),maM(ApNN2DA),bw=0.9,xlim=c(-2,2),titles=methods,type="b")
@


\begin{figure}
\begin{center}
\includegraphics[width=4in,height=3.5in,angle=0]{bPlot}
\end{center}
\caption{Box plot of normalized log ratios}
\protect\label{fig:bPlot}
\end{figure}


The {\tt maNormNN} function in {\tt nnNorm} package offers flexibility in choosing
the type of dependence of the bias to be accounted for. For e.g. setting {\tt binHeight} parameter
to NULL, will discard the variable {\tt Y} in the bias estimation model.

<<eval=TRUE, echo=TRUE, results=hide>>=
ApoNNy<-maNormNN(Apo[,1],binWidth=3,binHeight=NULL)
@

In this case only {\tt A} and {\tt X} will be used as regressors for the bias. Similarly by setting
{\tt binWidth=NULL} in the same function will suppress the contribution of the {\tt X} variable
in the bias estimation.
The {\tt M-A} plots may be shown before and after the normalization for each slide if the parameter {\tt maplots}
is set to {\tt "TRUE"}.

For the case when only intensity normalization is desired ({\tt X}, and {\tt Y} regressors discarded)
we provide the facility to plot the bias estimates against the intensity level. For e.g. lets' perform intensity normalization only
for the 13th slide of the Apo batch:

<<robust,fig=TRUE,prefix=FALSE,echo=TRUE,include=FALSE,results=hide>>=
par(mfrow=c(2,1))
par(mar=c(2, 4, 2, 2))
ApoNr<-maNormNN(Apo[,13],binWidth=NULL,binHeight=NULL,maplots=TRUE)
@


\begin{figure}
\begin{center}
\includegraphics[width=4.5in,height=5in,angle=0]{robust}
\end{center}
\caption{M-A plots before and after normalization for the whole slide.}
\protect\label{fig:robust}
\end{figure}

\bibliography{nnNormGuide}
\end{document}
